using System;
using System.Collections.Generic;
using System.Linq;
using System.wen;
using System.Data.Entity;

using System.ComponentModel.DataAnnotation;
using System.ComponentModel.DataAnnotation.Schema;
 
 namespace AppointmetCalendar.Models
 {
	 public class Appointment
	 {
		 [key]
		 [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		 public int id{get; set;}
		 public string Description{get; set;}
		 public DateTime StartDate{get; set;}
		 public DateTime EndDate{get; set;}
	 }
 }
 
 //page2
 using System;
using System.Collecgtions.Generic;
using System.Linq;
using System.Web;
using System.Data.Entity;
 
 
 namespace AppointmentClendar.Models
 {
	 public class CalendarContext:Dbcontext
	 {
		 public CalendarContext():base()
		 {
			 Datebase.SetInitializer(new CreateDatabseIfNotExists<CalendarContext>());
		 }
		 public System.Data.Entity.DbSet<AppointmentClendar.Model.Appointment>Appointment{get; set;}
	 }
 }
 
 //page3
 <connectionStrings>
    <add name="CalendarContext"
	     providerName="System.Data.SqlClient"
		 connectionString="Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets="True"/>
		
//page4
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;


using DHTMLX.Scheduler;


namespaceAppointmentCalendar.controllers
{ 
    public class HomeController:Controller
	{
		public ActionResult Index()
		{
			var scheduler=new DHXScheduler(this);
			scheduler.Skin =DhxScheduler.Skin.Flat;
			return View(scheduler);
		}
	}
}
//html and css page
<!DOCTYPE html>
<html>
<head la="en">
              <meta charset="utf-8"/>
			  <meta name="viewport" content="width=device-width,initial-scale-1.0">
			  <title>My Appointment Scheduler</title>
			  <link href="-/Content/Site.css" rel="stylesheet" type="text/css"?>
			  <link href="-/Content/bootstrap.min.css" rel="stylesheet" type="text/css"/>
			  </head>
			  <body>
			       <div clsss"navbar navbar-inverse navbar-fixed-top">
				       <div class="Container">
					   <div class ="navbar-header">
					   @Html.ActionLink("Application name","Index","Home",null,new{@class="navbar-brand"}
					   </div>
					   <div class="navbar-collapse collapse">
					        <ul class="nav navbar-nav">
							</ul>
							</div>
						</div>
					</div>
					<div class ="container body-content">
					@RenderBody()
					<hr/>
					<footer>
					      <p>&copy @dateTime.Now.Year-My Schedule-Application</p>
					</footer>
					</div>
					
					<script src="-/Scripts/jquery-1.9.1.min.js"></script>
					<script src="-Scripts?bootstrap.min.js"></script>
					
					</body>
</html>


@{
	ViewBag.Title="DHTMLX Scheduler .NET";
	Layout="-/Views/Shared?_Layout.cshtml"
}
<h2>Appointment Calendar</h2>
<div class"scheduler_container">
	 @Html.Raw(Model.Render())
</div>

body{
	padding-top:50px;
	padding-bottom:20px;
}
>scheduler_container{
	width:100%;
	height:600px;
	border:1px solid #aeaeae;
}
	



using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Data.Entity;

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using DHTMLX.Scheduler;


namespace AppointmentClendar.Models
{
	public class AppointmentClendar
	{
		[Key]
		[DatabaseGenerated(DatabaseGeneratedOption.Identity)]
		[DHXJson(Alias="id"]
	public int Id(get; set;}
	
	
	
	[DHXJson(Alias="text")]
	public string Description{get; set;}
	[DHXJson(Alias="start_date")]
	public DateTime StartDate{ get; set;}
	[DHXJson(Alias="end_date")]
	public DateTime EndDate{get; set;}
}
}

		
		



using Systm;
using System.Collections.Generic;
using system.Linq;
using System.Web;
using System.Web.Mvc;
using System.Data;
using System.Data.Entity;
using DHTMLX.Scheduler;
using DHTMLX.Scheduler.Data;
using DHTMLX.Common;


using AppointmentCalendar.Models;

namespace AppointmentClendar.Controllers
{
	public class HomeController:Controller;
	{
		private CalendarContext db=new CalendarContext();
		
		
		public ActionResult Index()
		{
			var scheduler=new DHXScheduler(this);
			scheduler.Skin=DHXScheduler.Skins.Flat;
			
			scheduler.Config.first_hour=6;
			scheduler.config.last_hour=20;
			
			
			scheduler.LoadData=true;
			schedular.EnableDataprocessor=true;
			return View(scheduler);
		}
		public contentResult Data()
		{
			var apps=db.Appointments.ToList();
			return new SchedulerAjaxData(apps);
		}
		public ActionResult Save(int ?id,FormCollection actionValues)
		{
			var Action = new DataAction(actionValues);
			try{
				var changedEvent=DHXEventHelper.Bind.Appointment>(actionValues);
				switch(action.Type)
				{
					case:DataActionTypes.Insert:
					db.Appointments.Add(changedEvent);
					break;
					case:DataActionTypes.Delete:
					db.Entry(changedEvent).State=EntityState.Deleted;
					break;
					default:
					db.Entity(chagedEvent).State=EntityState.Modified;
					break;
				}
				db.saveChanges();
				action.TargetId=changedEvent.Id;
			}
			catch(Exception a)
			{
				action.Type=DataActionTypes.Error;
			}
			return(new AjaxSaveResponse(action));
		}
		protected overridevoid Dispose(bool disposing)
		{
			if(disposing)
			{
				db.Dispose();
			}
			base.Dispose(disposing);
		}
	}
}

public ActionResult Index()
{
	var scheduler=new DHXScheduler(this);
	scheduler.Skin=DHXScheduler.Skins.Flat;
	
	scheduler.config.first_hour=6;
	scheduler.config.last_hour=20;
	
	
	scheduler.LoadData=true;
	scheduler.EnableDataprocessor=true;
	
	return View(scheduler);
}
public ContentResult Data(0
{
	var apps=db.Appointments.ToList()
	return new SchedulerAjaxData(apps);
}
public ActionResult save(int?id,FormCollection actionValues)
{
	var Action = new DataAction(actionValues);
	try
	{
		var changedEvent=DHXEventsHelper.Bind<Appointment>(actionValues);
		switch(action.Type)
				{
					case:DataActionTypes.Insert:
					db.Appointments.Add(changedEvent);
					break;
					case:DataActionTypes.Delete:
					db.Entry(changedEvent).State=EntityState.Deleted;
					break;
					default:
					db.Entity(chagedEvent).State=EntityState.Modified;
					break;
				}
				db.saveChanges();
				action.TargetId=changedEvent.Id;
			}
			catch(Exception a)
			{
				action.Type=DataActionTypes.Error;
			}
			return(new AjaxSaveResponse(action));
		}
		
		
	}
}	
				